//SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {HandlerStatefulFuzzCatches} from "../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../mocks/MockUSDC.sol";
import {YeildERC20} from "../mocks/YeildERC20.sol";

contract Handler is Test{
    HandlerStatefulFuzzCatches handlerStatefulFuzzCatches;
    MockUSDC usdc;
    YeildERC20 yusdc;
    address user;
    constructor(
            HandlerStatefulFuzzCatches _handlerStatefulFuzzCatches,
            MockUSDC _usdc,
            YeildERC20 _yusdc,
            address _user
        ) {
            handlerStatefulFuzzCatches = _handlerStatefulFuzzCatches;
            usdc = _usdc;
            yusdc = _yusdc;
            user = _user;
            }

        function depositYeildERC20(uint256 _amount) public{
            uint256 amount=bound(_amount,0,yusdc.balanceOf(user));
            vm.startPrank(user); 
            yusdc.approve(address(handlerStatefulFuzzCatches),amount); 
            handlerStatefulFuzzCatches.depositToken(yusdc,amount);
            vm.stopPrank();
        }
        function depositMockUSDC(uint256 _amount) public{
            uint256 amount=bound(_amount,0,usdc.balanceOf(user));
            vm.startPrank(user); 
            usdc.approve(address(handlerStatefulFuzzCatches),amount);  
            handlerStatefulFuzzCatches.depositToken(usdc,amount);
            vm.stopPrank();
        }
        function withdrawMockUSDC() public{
            vm.startPrank(user);
            handlerStatefulFuzzCatches.withdrawToken(usdc); 
            vm.stopPrank();
        }
        function withdrawYeildERC20() public{
            vm.startPrank(user);
            handlerStatefulFuzzCatches.withdrawToken(yusdc); 
            vm.stopPrank();
        }

}